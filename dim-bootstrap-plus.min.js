"use strict";let bootstrap=window.bootstrap,Plus={enableBootstrapTooltips:()=>{let tooltipTriggerList,tooltipList;return[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function(tooltipTriggerEl){return new bootstrap.Tooltip(tooltipTriggerEl)}))},enableBootstrapPopovers:()=>{let popoverTriggerList,popoverList;return[].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')).map((function(popoverTriggerEl){return new bootstrap.Popover(popoverTriggerEl)}))},enableCustomColors:()=>{let customButtons=document.querySelectorAll("[data-plus-btn]");if(customButtons.forEach((function(element){element.style.backgroundColor=element.attributes["data-plus-btn"].value,element.style.color="white"})),customButtons.length>0){var sheet=window.document.styleSheets[0];sheet.insertRule("[data-plus-btn]:hover{filter: brightness(95%);}",sheet.cssRules.length)}return document.querySelectorAll("[data-plus-background]").forEach((function(element){element.style.backgroundColor=element.attributes["data-plus-background"].value})),document.querySelectorAll("[data-plus-color]").forEach((function(element){element.style.color=element.attributes["data-plus-color"].value})),[...customButtons,...document.querySelectorAll("[data-plus-background]"),...document.querySelectorAll("[data-plus-color]")]},showModal:modalId=>{let theModal=new bootstrap.Modal(document.getElementById(modalId));return theModal.show(),theModal},showToast:(toastIdOrClass,duration=1e4)=>{var toastElList;let toastList=[].slice.call(document.querySelectorAll(toastIdOrClass)).map((function(toastEl){return new bootstrap.Toast(toastEl,{delay:duration})}));return toastList.forEach(toast=>toast.show()),toastList},changeProgress:(elementID,value)=>(document.getElementById(elementID+"-progress").style.width=value,document.getElementById(elementID)),hide:elementID=>{let element=document.getElementById(elementID);return element.classList.add("d-none"),element},show:elementID=>{let element=document.getElementById(elementID);return element.classList.remove("d-none"),element},hideParent:function(element){return element.parentElement.classList.add("d-none"),element.parentElement},addClass:(elements,additionalClass)=>{let elementList=document.querySelectorAll(elements);return elementList.forEach(element=>element.classList.add(additionalClass)),elementList},setCssProperty:(variable,value)=>(document.documentElement.style.setProperty(variable,value),value)};class BootstrapIcon extends HTMLElement{constructor(){super();let size=this.getAttribute("size")||"1rem",icon;switch(this.innerText){case"check-circle-fill":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-check-circle-fill" viewbox="0 0 16 16">\n                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>\n                    </svg>\n                `;break;case"info-circle-fill":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-info-circle-fill" viewbox="0 0 16 16">\n                        <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"/>\n                    </svg>\n                `;break;case"question-circle-fill":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-question-circle-fill" viewbox="0 0 16 16">\n                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.496 6.033h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286a.237.237 0 0 0 .241.247zm2.325 6.443c.61 0 1.029-.394 1.029-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94 0 .533.425.927 1.01.927z"/>\n                    </svg>\n                `;break;case"x-circle-fill":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-x-circle-fill" viewbox="0 0 16 16">\n                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>\n                    </svg>\n                `;break;case"exclamation-triangle-fill":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-exclamation-triangle-fill" viewbox="0 0 16 16">\n                        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>\n                    </svg>\n                `;break;case"list":this.outerHTML=`\n                    <svg xmlns="http://www.w3.org/2000/svg" width="${size}" height="${size}" fill="currentColor" class="bi bi-list" viewbox="0 0 16 16">\n                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"/>\n                    </svg>\n                `}}}window.customElements.define("bootstrap-icon",BootstrapIcon);class BootstrapCarousel extends HTMLElement{constructor(){super();let imagesArray=eval(this.innerText),classes=this.getAttribute("class")||"",imagesDIVS="",buttonsDIVS="";for(let i=0,len=imagesArray.length;i<len;i++){let carouselClass=0==i?"active":"",buttonClass=0==i?'class="active"':"";buttonsDIVS+=`         \n                <button type="button" data-bs-target="#${this.id} " data-bs-slide-to="${i}" ${buttonClass}></button>\n            `,imagesDIVS+=`\n                <div class="carousel-item ${carouselClass}">\n                    <img src="${imagesArray[i][0]}" class="d-block w-100" alt="${imagesArray[i][1]}">\n                </div>\n            `}this.outerHTML=`\n        <div id="${this.id}" class="carousel slide ${classes}" data-bs-ride="carousel">\n        <div class="carousel-indicators">\n            ${buttonsDIVS}\n        </div>\n        <div class="carousel-inner">\n            ${imagesDIVS}\n        </div>\n        <button class="carousel-control-prev" type="button" data-bs-target="#${this.id} " data-bs-slide="prev">\n          <span class="carousel-control-prev-icon"></span>\n          <span class="visually-hidden">Previous</span>\n        </button>\n        <button class="carousel-control-next" type="button" data-bs-target="#${this.id} " data-bs-slide="next">\n          <span class="carousel-control-next-icon"></span>\n          <span class="visually-hidden">Next</span>\n        </button>\n      </div>\n        `}}window.customElements.define("bootstrap-carousel",BootstrapCarousel);class BootstrapAlert extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}`:"",alertClass=this.getAttribute("alert-class")||"";this.outerHTML=`\n        <div ${identity} class="alert ${alertClass} alert-dismissible fade show" role="alert">\n            ${this.innerHTML}\n            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>\n        </div>\n        `}}window.customElements.define("bootstrap-alert",BootstrapAlert);class BootstrapCloseButton extends HTMLElement{constructor(){let fix;super(),this.getAttribute("fix")||this.parentElement.classList.add("position-relative"),this.outerHTML='\n            <button type="button" class="btn-close position-absolute top-0 end-0" aria-label="Close" onclick="Plus.hideParent(this)"></button>\n            '}}window.customElements.define("bootstrap-close-button",BootstrapCloseButton);class BootstrapProgress extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}-progress`:"",percentage=this.getAttribute("value"),bgColor=this.getAttribute("color")?"bg-"+this.getAttribute("color"):"";this.innerHTML=`\n            <div class="progress">\n                <div ${identity} class="progress-bar progress-bar-striped ${bgColor}" role="progressbar" style="width: ${percentage}"></div>\n            </div>\n            `,this.classList.add("d-block")}}window.customElements.define("bootstrap-progress",BootstrapProgress);class BootstrapList extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}`:"",classes=this.getAttribute("class")||"",inputArray=eval(this.innerHTML),listItems=inputArray.map(item=>`<li class="list-group-item list-group-item-action">${item}</li>`);this.outerHTML=`\n            <ul ${identity} class="list-group ${classes}">${listItems.join("")}</ul>\n            `}}window.customElements.define("bootstrap-list",BootstrapList);class BootstrapSpinner extends HTMLElement{constructor(){super(),this.innerHTML=`\n            <div class="d-flex flex-column align-items-center">\n                <div class="spinner-border text-${this.getAttribute("color")||"dark"} m-2" role="status">\n                    <span class="visually-hidden">Loading...</span>\n                </div>\n                <div>${this.innerText}</div>\n            </div>\n            `,this.classList.add("d-block")}}window.customElements.define("bootstrap-spinner",BootstrapSpinner);class BootstrapAccordion extends HTMLElement{constructor(){super();let classes=this.getAttribute("class")||"",next=((int=1)=>()=>int++)(),itemsArray=eval(this.innerHTML),accordionItems=itemsArray.map(item=>{let itemNumber=next();return`\n                <div class="accordion-item">\n                    <h2 class="accordion-header" id="${this.id}heading${itemNumber}">\n                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse${this.id}${itemNumber}">\n                            ${item[0]}\n                        </button>\n                    </h2>\n                    <div id="collapse${this.id}${itemNumber}" class="accordion-collapse collapse" data-bs-parent="#${this.id}">\n                        <div class="accordion-body">${item[1]}</div>\n                    </div>\n                </div>\n            `});this.outerHTML=`\n            <div class="accordion ${classes}" id="${this.id}">${accordionItems.join("")}</div>\n            `}}window.customElements.define("bootstrap-accordion",BootstrapAccordion);class BootstrapToast extends HTMLElement{constructor(){super();let toastColor=this.getAttribute("color"),inputArray=eval(this.innerHTML);this.outerHTML=`\n            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">\n                <div id="${this.id}" class="toast" role="alert">\n                    <div class="toast-header">\n                        <div style="background-color: ${toastColor}; height: 20px; width: 20px;" class="rounded me-2" title="Gold"></div>\n                        <strong class="me-auto">${inputArray[0]}</strong>\n                        <small>${inputArray[1]}</small>\n                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>\n                    </div>\n                    <div class="toast-body">${inputArray[2]}</div>\n                </div>\n            </div>\n            `}}window.customElements.define("bootstrap-toast",BootstrapToast);class BootstrapModalButton extends HTMLElement{constructor(){super();let btnClass=this.getAttribute("btn-class"),modalId=this.getAttribute("modal-id"),inputArray=eval(this.innerHTML);this.innerHTML=`\n            <button type="button" class="btn ${btnClass}" data-bs-toggle="modal" data-bs-target="#${modalId}">\n                ${this.getAttribute("btn-caption")}\n            </button>\n            <div class="modal fade" id="${modalId}" tabindex="-1">\n                <div class="modal-dialog">\n                    <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title" id="${modalId}Label">${inputArray[0]}</h5>\n                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                    </div>\n                    <div class="modal-body">\n                        ${inputArray[1]}\n                    </div>\n                    <div class="modal-footer">\n                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">${inputArray[2]}</button>\n                    </div>\n                    </div>\n                </div>\n            </div>\n            `}}window.customElements.define("bootstrap-modal-button",BootstrapModalButton);class BootstrapModal extends HTMLElement{constructor(){super();let inputArray=eval(this.innerHTML);this.outerHTML=`\n            <div class="modal fade" id="${this.id}" tabindex="-1">\n                <div class="modal-dialog">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="${this.id}Label">${inputArray[0]}</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            ${inputArray[1]}\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">${inputArray[2]}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `}}window.customElements.define("bootstrap-modal",BootstrapModal);let itemsArrayToItems=itemsArray=>itemsArray.map(item=>{if("hr"==item[0])return'<li><hr class="dropdown-divider"></li>';if("(submenu)"==item[1]){let direction;return`\n            <div class="dropdown-submenu ${window.innerWidth>=576?"dropend":"dropdown"}">\n            <button type="button" class="dropdown-item dropdown-toggle" data-bs-toggle="dropdown">\n                ${item[0]}\n            </button>\n            <ul class="dropdown-menu dropdown-submenu-area" style="inset: 10% auto auto 95%">\n                ${itemsArrayToItems(item[2]).join("")}\n            </ul>\n            </div>\n          `}return item[2]?`<li><button class="dropdown-item" id="${item[2]}">${item[0]}</button>`:`<li><a class="dropdown-item" href="${item[1]}">${item[0]}</a></li>`});class BootstrapDropDown extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}`:"",itemsArray=eval(this.innerText),classes=this.getAttribute("class")||"",directionClass=this.getAttribute("direction-class")||"",caption=this.getAttribute("caption")||"",items=itemsArrayToItems(itemsArray);this.outerHTML=`\n      <div ${identity} class="d-inline-block ${classes} ${directionClass}">\n          <span role="button" class="dropdown-toggle" href="#" data-bs-toggle="dropdown">\n              ${caption}\n          </span>\n          <ul class="dropdown-menu">\n              ${items.join("")}\n          </ul>\n      </div>\n  `}}window.customElements.define("bootstrap-dropdown",BootstrapDropDown);class BootstrapDropDownButton extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}`:"",itemsArray=eval(this.innerText),btnClass=this.getAttribute("btn-class")||"",buttonCaption=this.getAttribute("btn-caption")||"",directionClass=this.getAttribute("direction-class")||"",items=itemsArrayToItems(itemsArray);this.outerHTML=`\n      <div ${identity} class="btn-group ${directionClass}">\n          <button type="button" class="btn ${btnClass} dropdown-toggle" data-bs-toggle="dropdown">\n              ${buttonCaption}\n          </button>\n          <ul class="dropdown-menu">\n              ${items.join("")}\n          </ul>\n      </div>\n  `}}window.customElements.define("bootstrap-dropdown-button",BootstrapDropDownButton);var dropdownSubmenus=document.querySelectorAll(".dropdown-submenu");dropdownSubmenus.forEach(el=>{el.addEventListener("mouseenter",()=>{let sumbenuArea=el.querySelector(".dropdown-submenu-area");sumbenuArea.style.display="block";let bounding=sumbenuArea.getBoundingClientRect();if(bounding.right>window.innerWidth){let move=.93*el.offsetWidth+sumbenuArea.offsetWidth;sumbenuArea.style.transform=`translate(-${move}px)`,bounding=sumbenuArea.getBoundingClientRect(),bounding.left<0&&(sumbenuArea.style.transform=`translate(-${sumbenuArea.offsetWidth}px,0.8em)`)}}),el.addEventListener("mouseleave",()=>{let sumbenuAreas;el.querySelectorAll(".dropdown-submenu-area").forEach(el=>el.style.display="none")})});class BootstrapRadio extends HTMLElement{constructor(){super();let options=eval(this.innerHTML),radioName=this.getAttribute("radio-name")||"radioName";this.innerText="",options.forEach(element=>{let checked="checked"==element[3]?"checked":"";this.innerHTML+=`\n                <div class="form-check">\n                    <input class="form-check-input" type="radio" name="${radioName}" value="${element[1]}" id="${element[0]}" ${checked}>\n                    <label class="form-check-label" for="${element[0]}">\n                        ${element[2]}\n                    </label>\n                </div>\n            `,this.classList.add("d-block")})}}window.customElements.define("bootstrap-radio",BootstrapRadio);class BootstrapCheck extends HTMLElement{constructor(){super();let options=eval(this.innerHTML);this.innerText="",options.forEach(element=>{let checked="checked"==element[3]?"checked":"";this.innerHTML+=`\n                <div class="form-check">\n                    <input class="form-check-input" type="checkbox" value="${element[1]}" id="${element[0]}" ${checked}>\n                    <label class="form-check-label" for="${element[0]}">${element[2]}</label>\n                </div>\n            `,this.classList.add("d-block")})}}window.customElements.define("bootstrap-check",BootstrapCheck);class BootstrapSwitch extends HTMLElement{constructor(){super();let options=eval(this.innerHTML);this.innerText="",options.forEach(element=>{let checked="checked"==element[3]?"checked":"";this.innerHTML+=`\n            <div class="form-check form-switch">\n                <input class="form-check-input" type="checkbox" value="${element[1]}" id="${element[0]}" ${checked}>\n                <label class="form-check-label" for="${element[0]}">${element[2]}</label>\n            </div>\n            `,this.classList.add("d-block")})}}window.customElements.define("bootstrap-switch",BootstrapSwitch);class BootstrapSelect extends HTMLElement{constructor(){super();let identity=this.id?`id=${this.id}`:"",classes=this.getAttribute("class")||"",options=eval(this.innerText),optionElements=options.map(element=>`<option value="${element[0]}">${element[1]}</option>`);this.outerHTML=`\n        <select ${identity} class="form-select ${classes}">${optionElements.join("")}</select>\n        `,this.classList.add("d-block")}}window.customElements.define("bootstrap-select",BootstrapSelect);